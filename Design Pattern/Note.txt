09/29/2021:
Difference between class and object.
Class is a real-life generic representation.
Object is a real life specific representation.


09/30/2021:
Collection framework: 
queue(V)
list(V)
set(v)
Map(k,v)

Difference between set and list.
Set remove the duplicate value
List cannot remove duplicate values.
Maps need unique keys but duplicate values do not matter.

Exception handling:
এক্সেপশন তিন প্রকার
Io এক্সেপশন: ইনপুট দেওয়া যদি কোন ভুল হয় তাহলে আমরা এখানে ioএক্সপেক্টেশন ইউজ করি।
রানটাইম এক্সেপশন: রানটাইম এক্সেপশন তিন প্রকার ।
অ্যারিথমেটিক এক্সেপশন, নাল পয়েন্টের এক্সেপশন।



ডেভেলপমেন্ট এর দুইটা ফেজ একটি ডেভলপমেন্ট আরেকটা ডেভলপমেন্ট.

রেলি ফ্যাক্টরি না এমন একটি বিষয় যেটি দ্বারা কোডের ছোট ছোট ইন্টার্নাল বিষয়গুলো পরিবর্তন হবে বা কোডের ইন্টার্নাল স্ট্রাকচার্ড এর পরিবর্তন হতে পারেইমপ্লিমেন্টেশন এর নাম পরিবর্তন ভাই এক্সটার্নাল বিহেভিয়ার পরিবর্তন হবে না

আমার কোথায় কোথায় রিফ্লেক্টর করতে পারি;


Re-ফ্যাক্টর করলে কি হবে 
দুইটা পদ্ধতিতে আমরা রিফ্লেক্টর করব 
Code-smells



রিফ্লেক্টর করার সময় ছোট ছোট এবং উক্ত বিষয়ে সাথে রিলেটেড বিষয়গুলো নিয়েই শুধু রিফ্লেক্টর করব 
Code smells:
code স্মেল হলো আমাদের ডিজাইন প্রবলেম  এর মানে হলো আমাদের যেই ডিজাইনের গাইডলাইন আছে সেটি মেন্টেন না করে ডিজাইন করি সেটি হল কোড স্মেল।
Common Code smells:
Inappropriate Naming: আমরা এমন ভাবে নাম প্রোভাইড করবে যেটা দেখে উক্ত ডেভলপাররা যেন বুঝতে পারে এটা কি কারনে ব্যবহার করা হয়েছে ভেরিয়েবলের নামটি এমন হতে হবে ওটিজি ধরনের কাজ করে বা ওই কাজের জন্য যেটি সব থেকে পারফেক্ট ম্যান সিটি . আমরা যখন মেথড ডিক্লেয়ার করব তখন আমাদের খেয়াল রাখতে হবে মেথড যেই কাজটি করে ঠিক ওই ধরনের নামটি যেন রিপ্রেজেন্ট করে মেথডের নাম হিসেবে 
Comments: আমরা এমন ভাবে কমেন্ট লিখব সেই কমেন্টে এমন শক্তির অধিকারী হবে আমরা যেন সেই কমেন্টটি পড়ে এই উক্ত code সম্বন্ধে সবকিছু বুঝতে পারি যেটা দেখে আমরা পরে আমাদের কাজ অনুযায়ী মেথড রিনেম করতে পারে মেথড এক্সট্রেক্ট করতে পারে মেন কথা কমেন্ট হলো আমাদের জন্য একটি note জেটির দ্বারা আমরা ভবিষ্যতে ওই কোনটিকে ব্যবহার করতে পারি আমাদের প্রয়োজন অনুযায়ী 
Rename Method: যদি আমাদের কাজ করতে গিয়ে ভবিষ্যতে উক্ত মেথড এর নাম পরিবর্তন করতে হবে বলে মনে হয় তাহলে আমরা - ইউজ করে করতে  পারি.
Introduce Assertion: এটা আমাদের একটি মেসেজ দেয় কি ধরনের ইনপুট বা কি ধরনের বিষয় নিয়ে এখানে কাজ করতে পারব যেমন অ্যান্ড্রয়েড এর toast

Long method: যে একটি মেথড এর মধ্যে অনেকগুলো কাজ থাকে বা বলতে পারেন অনেকগুলো কম্প্লেক্সিটি থাকে অনেক ধরনের কাজ একটি মেথড এর মধ্যে থাকে একে লং মেথড বলে। 
পেটের ভিতর যেহেতু অনেক ধরনের কাজ হয় তাই এটির বিহেভিয়ার টা hide হয়ে যায় খুব সহজে বোঝা যায় না।

ভালো object-oriented সেটাই হবে যেটি ছোট হবে মেথড দেখে বোঝা যাবে এবং এদের কাজ অনুযায়ী মেথড এর নাম হবে।

Remedies:
Extract method
Replace temp with query
Introduce parameter object
Preserve whole object
=এখানে আমাদের শুধু একটা অবজেক্টের ভ্যালু প্যারামিটার হিসেবে পাঠালে বিষয়টি ভালো হবে না আমাদের টোটাল সাবজেক্ট প্যারামিটার হিসেবে পাঠাতে হবে তারপরে প্রয়োজনমতো ভালো গুলো বের করে নেব মেথড এর ভেতর থেকে।
Replace method with method object
=
Decompress conditional
এই মেথডে মেনটেন করলে একটি বড় জটিল মেথডকে ছোট মেথড এ পরিণত করা সম্ভব।
বা একটি long method কে একটি small method এ পরিণত করতে পারি।

Long parameter list: আমাদের একটা মেথড এর মধ্যে অনেকগুলো প্যারামিটার আছে যেমন আমরা মোর দেন ওয়ান কে লং প্যারামিটার বলতে পারি।
এটি থেকে বাঁচার উপায়: 
Remedies:
Introduce parameter object
=একাধিক সিঙ্গেল সিঙ্গেল প্যারামিটার না পাঠিয়ে ডাইরেক object টা পাঠিয়ে দিলেই তো সব গুলো পাওয়া যাবে
Replace parameter with method
=প্যারামিটার কে মেথড দ্বারা রিপ্লেস করে ফেলতে হবে। 
Preserve whole object
=আমরা প্রতিটি অবজেক্টের ভ্যালু আদালতে না নিয়ে টোটাল অবজেক্ট তাই পাঠিয়ে দিয়ে ভিতর থেকে প্রয়োজনীয় মত ভ্যালু নেব।
 Feature Envy: যেই মেথড ডিজে জায়গায় আছে তার থেকে মনে হচ্ছে অন্য জায়গায় এটি বেশি ইন্টারেস্ট এটাকে আমরা feature envy বলে বা আমরা বলতে পারি একটি মেথড নিজ ক্লাসে আছে সে ক্লাস থেকে একবার কল হয়েছে কিন্তু অন্য ক্লাস থেকে দুই-তিনবার কল হয়েছে তাহলে আমরা বলতে পারি এখানে ফিশারি আনবে আসে কারণ এটির এই ক্লাসের থেকো অন্য ক্লাস এর প্রয়োজন এতে বেশি।
Remedies:
Move field: ক্লাস ওয়ানের একটা ফিল্ড ক্লাস টু এর অধিক তার ব্যবহৃত হচ্ছে তাই আমরা এক্ষেত্রে জাস্ট ক্লাস ওয়ানের ফিল্টার ক্লাস টুয়ে নিয়ে আসব।
Move method: মেথড এর ভিতরে যে মেথড গুলো অধিক তর ক্লাস টুয়ে ব্যবহৃত হচ্ছে সেটি ক্লাস টুয়ে নিয়ে আসব এবং যেগুলো ক্লাস ওয়ানে ব্যবহৃত হচ্ছে অধিকার সেগুলো ক্লাস ওয়ানের রাখবো
Extract method



Dead code: 
Dead code সেই কোডটা কে বলা হয় যেটি করে ব্যবহৃত হয় না।
আমি নিজে নিজে একটি অ্যালগরিদম বানিয়েছি সেটিতে একটি ফাংশন বা মেথড দিয়েছি অনেকক্ষণ যাবৎ বা একেবারেই কল হচ্ছে না সেটি হলো dead code।
Remedies:
আমাদের যদি কোন dead code থাকে তাহলে আমাদের সেটিকে ডিলিট করে দিতে হবে। 

Duplicate code: 
আমি চাই বা না চাই তাও ডুবলিকেট কোড জেনারেট হতে পারে।
যদি আমি কোন সময় কপি-পেষ্ট' করি তাহলে অবশ্যই ডুবলিকেট করতে হবে।

Similar algorithm:
আমরা যেমন এক জায়গায় দেখা বাবল সর্ট করেছি আরেক জায়গায় কুইক সর্ট ইউজ করেছি এক্ষেত্রে ডুবলিকেট কোড জেনারেট হতে পারে।
From template method: 
আমরা এখানে একটি বেসিক টেমপ্লেট ইউজ করে কোড করতে পারে সেক্ষেত্রে আমরা করে কোডের duplicate কমাতে পারি


 প্যারালাল ইনহেরিটেন্স করলে obvious duplication হবে

Luteal duplication:
সেম ফর লুপ যদি দুই জায়গায় হয় তাহলে সেটাকে Luteal duplication.


লুপ ডুবলিকেট হবে এবং লুপ এর ভিতরে লাইন অফ করে যদি ডুবলিকেট হয় semantic duplication

আমরা যখন সফটওয়্যারটাকে টেস্ট করি কোন ভিন্ন ডাটা দিয়ে তখন ডাটাগুলো ডুপ্লিকেশন হতে পারে বা ডাটাগুলো একই হতে পারে  তাকে Data duplication বলে।

আমরা একই কাজের জন্য দুইটা ডিফারেন্ট টাইপ এর অ্যালগরিদম ইউজ করলে সে ক্ষেত্রে Conceptual duplication দেখা দেয়। 

আমরা আমাদের কিছু সেট অফ স্টেট কে বারবার ইউজ করি logical step duplication.

Pull Up Field: 
দুইটা ক্লাসের মধ্যে কমন ফিল্ড বা ভেরিয়েবল আছে সেটিকে আমরা উপরের অন্য কোন অন্য একটি ক্লাসে নিয়ে এসে inherit করে এই ক্লাসগুলোতে ব্যবহার করতে পারি কিনা যদি পারি তাহলে duplication কমতে পারে।

From Template Method: 
আমরা কতগুলো একই ধরনের কাজের জন্য একটি টেমপ্লেট বানাতে পারি যেখান থেকে শুধু কল করে কাজটি সম্পাদন করতে পারি এক্ষেত্রে আমাদের কোড ডুপ্লিকেশন কমে যাবে। 
Substitute algorithm:
 আমাদের একাধিক নাম চেক করতে হলে একাধিকবার if-else কন্ডিশন ইউজ করতে হতো কিন্তু আমরা সেটি একাধিকবার ইউজ করলে code duplication বেড়ে যাবে যদি এটা আমরা একটি substitute বা array বা arraylist ইউজ করে করি তাহলে একটি কন্ডিশন দিয়ে সব করা সম্ভব।
Code is smell:
Replace temp with query: 
আমরা একটি এ ক্যালকুলেশন করতে পারি যখন সেটি ভেরিয়েবলের ভিতর রাখবো কিন্তু এটি শুধু একবার ইউজ করতে পারবো যেমন
Sum=a+b; 
যদি এই বিষয়টি আমরা একটি মেথড এর মধ্যে করে থাকি তাহলে সেটি আমরা যেকোন যায়গায় যেকোন স্থানে বারবার কল করে নিতে পারব যেমন
GetSum()
{
Return a+b;
}
Sum=GetSum();
Introduce parameter object:
আমরা কোন মেথডের প্যারামিটার হিসেবে দুই বা ততোধিক প্যারামিটার না পাঠিয়ে যত কম সংখ্যক বা একটি প্যারামিটার পাঠিয়ে সেটির কাজ করার চেষ্টা করব 
যেমন: 
Start & end না পাঠিয়ে আমরা পাঠাবো duration যাতে করে আমরা ডিউরেশন এর মধ্য থেকে start & end বের করে নিতে পারি।
Preserve whole object: 
আমাদের যদি একটি মেথড এর ভিতরে একটি অবজেক্টের একাধিক ভ্যালু প্রয়োজন হয় সেক্ষেত্রে আমরা মেথড এর মধ্যে একটি একটি করে ভ্যালু পাস না করে টোটাল অবজেক্টিভ পাস করে দিব যাতে করে আমরা আমাদের প্রয়োজনমতো ভ্যালু যেকোনো সময় যে কয়বার ইচ্ছা সেই কয়বার সেটা নিতে পারে
Replace method with method objects:
যদি আমাদের কোন সময় একই ধরনের মেথড বারবার ইউজ হচ্ছে সেক্ষেত্রে আমরা ওই মেথড গুলোকে একটি আলাদা ক্লাসে ডিফাইন করে সেই ক্লাসের অবজেক্ট হিসেবে কল করে কাজ করতে পারি এটা ভালো প্র্যাকটিস।
Decompose conditional:
আমাদের যখন একটি বিষয়কে একাধিক বিষয়ে গিয়ে চেক করতে হয় তখন আমাদের if কন্ডিশন এর ভিতরে অপারেটরের মাধ্যমে একাধিক কন্ডিশন হয়েছে যেটা একটি জঘন্য টাইপের দেখায় তাই আমরা এক্ষেত্রে if কন্ডিশন এর ভিতরে কন্ডিশন যদি একটি মেথড এর ভিতরে দিয়ে দিই এবং সম্পূর্ণ কাজটি মেথড এর ভিতর করি তাহলে if কন্ডিশন খুব পরিষ্কার থাকবে যেটি আমরা খুব সহজেই বুঝতে পারব।
Long parameter list:
 আমার একটা মেথড এর মধ্যে অনেক প্যারামিটার আছে এটিকে long parameter বলে। More than one parameter we can say long parameter. Long method নিয়ে কাজ করার পূর্বে আমাদের দেখতে হবে ওই মেথডের প্যারামিটার টা যেন লং না হয়। Long parameter এর ক্ষেত্রে আমরা সবসময় introduce parameter object এই বিষয়টি মেন্টেন করার চেষ্টা করব।
Replace parameter with method:
আমাদের সেই ভ্যালু গুলো ক্যালকুলেশন করে নিয়ে প্যারামিটার হিসেবে একটি মেথড এর ভিতরে পাঠাবো সেই কাজটি না করে আমরা প্যারামিটার হিসেবে ভাল টিকে না পাঠিয়ে মেথড এর ভেতর থেকেই একটি ফাংশন কল করব যেটির ক্যালকুলেশন করে দিবে।
Feature Envy:
যেখানে যাই বিষয়টি থাকার কথা সেখানে সেটি না থেকে অন্য জায়গায় আছে। মেথডটির কাজ ঠিকই হচ্ছে কিন্তু মেথলি যেখানে থাকার কথা সেখানে না থেকে অন্য জায়গায় আছে। যেমন: 
Login এই বিষয়টা আমার রেখে দিয়েছি স্টুডেন্ট ক্লাসের ভিতর কিন্তু এটি আরো অন্যান্য ক্লাস থেকে কল হচ্ছে। যদি এরকম কোন ঘটনা ঘটে তাহলে তাকে আমরা বলে থাকি Feature Envy. 
তারমানে আমরা বলতে পারি যে ম্যাথ পর্দায় যেই জায়গায় আছে তার ছাড়াও সেটিকে অন্য জায়গায় বেশি ইন্টারেস্টেড মনে হচ্ছে এটিকে feature envy বলে।
Dead code:
আমার অ্যাপ্লিকেশনের যে কোডটি ইউজ হচ্ছে না সেটি কে dead code বলা হয়।
The code that is no longer used in a system all related system is that code.
Remedies is Delete the code.


Design Pattern:
Type:
Structural Pattern: 
স্ট্রাকচারাল ডিজাইন কাজ করে যে আমাদের সিস্টেম এর ভিতর ক্লাস এবং অবজেক্ট গুলো কিভাবে স্ট্রাকচার হতে থাকবে এবং কিভাবে স্ট্রাকচারাল একে অপরের সাথে কমিউনিকেশন করে কাজ করবে 
Concerns the composition of classes and objects.



Behavioral Pattern: আমাদের ক্লাস এবংঅবজেক্ট গুলো কি ধরনের আচরণ করে কার রিকোয়েস্টয়ে
 কে কি প্রোভাইড করবে কে কিভাবে রিকুয়েস্ট করবে সেই বিষয়গুলো কে বোঝায় বা বিহেভিয়ার পেটান এগুলোকে ডিসক্রাইব করে ।

Creational pattern: আমাদের যে অভিযোগগুলো কিভাবে ক্রিয়েট হবে সেই বিষয়গুলো ডিসক্রাইব করে ক্রিয়েশনাল প্যাটার্ন 

এই  ডিজাইন প্যাটার্ন গুলো আমাদের কিছু আছে ক্লাস স্কোপ আর কিছু আছে অবজেক্ট স্কোপ 
Class scope & object scope

Class scope:
কিছু ডিজাইন পাঠান কাজ করে আমাদের ক্লাস লেভেলের তাদের বলা হয় ক্লাস স্কোপ 
ক্লাসিস কবে আমাদের যেভাবে কাজ করে এই যে প্যান্ট ক্লাস থেকে সাত ক্লাসের মধ্যে রিলেশন গুলো কিভাবে মেন্টেন হয় সে গুলোকে ডিফাইন করব .

object scope:
আর কিছু ডিজাইন পাঠান কাজ করে আমাদের অবজেক্ট লেভেলে তাদের বলা হয় অবজেক্ট স্কোপ 
অবজেক্ট  স্কোপ কাজ করে কিভাবে আমাদের অবজেক্ট গুলো ডায়নামিক কালি ক্রিয়েট হবে সেই বিষয়গুলোকে অবজেক্ট স্কোপ 
